var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.019,1,2.105]],["body/classes/AllExceptionsFilter.html",[0,0.017,1,2.648,2,1.308,3,0.299,4,0.299,5,0.209,6,2.186,7,3.084,8,4.341,9,0.398,10,1.354,11,4.715,12,1.308,13,2.186,14,1.704,15,0.719,16,2.655,17,1.498,18,0.039,19,0.998,20,0.719,21,1.354,22,2.648,23,3.746,24,3.574,25,4.715,26,2.655,27,3.881,28,0.96,29,2.186,30,0.414,31,4.715,32,0.571,33,2.648,34,3.084,35,2.186,36,2.186,37,0.299,38,1.646,39,2.655,40,3.082,41,2.655,42,2.655,43,2.655,44,2.655,45,3.746,46,4.341,47,2.655,48,2.655,49,2.655,50,2.655,51,2.655,52,1.646,53,2.655,54,2.655,55,2.655,56,2.186,57,2.655,58,1.646,59,2.655,60,2.655,61,2.186,62,1.877,63,2.186,64,2.655,65,2.186,66,2.655,67,2.655,68,2.655,69,0.024,70,0.024]],["title/controllers/AppController.html",[71,1.319,72,1.846]],["body/controllers/AppController.html",[0,0.024,3,0.421,4,0.421,5,0.295,9,0.561,10,1.702,15,0.718,18,0.039,28,1.351,30,0.449,32,0.804,37,0.421,38,2.317,69,0.03,70,0.03,71,2.087,72,2.919,73,1.657,74,3.078,75,4.454,76,1.351,77,3.738,78,1.129,79,2.54,80,3.078,81,1.842,82,1.657,83,3.738]],["title/modules/AppModule.html",[84,1.076,85,1.846]],["body/modules/AppModule.html",[0,0.014,3,0.247,4,0.247,5,0.173,14,1.666,18,0.04,20,0.422,24,1.808,30,0.529,32,0.472,37,0.247,52,2.024,69,0.021,70,0.021,72,2.415,73,1.447,79,2.381,80,1.808,84,1.408,85,3.404,86,0.973,87,0.973,88,1.209,89,1.209,90,0.973,91,2.145,92,1.209,93,1.808,94,1.808,95,1.808,96,2.66,97,2.66,98,2.381,99,1.797,100,1.209,101,1.209,102,2.196,103,2.754,104,2.196,105,2.196,106,2.196,107,2.196,108,2.196,109,2.196,110,1.552,111,1.082,112,0.783,113,1.808,114,1.305,115,2.196,116,3.264,117,4.314,118,1.808,119,1.808,120,3.264,121,3.264,122,1.808,123,1.361,124,2.196,125,1.808,126,2.196,127,2.196,128,2.196,129,2.196,130,3.896,131,1.808,132,2.196,133,1.808,134,2.196,135,2.196,136,2.196,137,2.196,138,2.196,139,1.808,140,2.196,141,1.361,142,2.196,143,2.196,144,3.896,145,3.264,146,3.264,147,3.264]],["title/injectables/AppService.html",[79,1.467,148,0.879]],["body/injectables/AppService.html",[0,0.025,3,0.443,4,0.443,5,0.31,9,0.59,10,1.757,15,0.756,18,0.038,28,1.422,30,0.375,32,0.846,37,0.443,69,0.031,70,0.031,75,4.536,78,1.166,79,2.395,82,1.744,148,1.435,149,1.939,150,3.239,151,3.935,152,3.935,153,3.935]],["title/entities/Building.html",[112,0.714,154,1.639]],["body/entities/Building.html",[0,0.024,3,0.417,4,0.417,5,0.292,9,0.556,15,0.899,18,0.038,20,0.899,30,0.353,37,0.417,69,0.03,70,0.03,76,1.692,78,1.293,112,1.123,141,2.297,154,2.577,155,3.05,156,1.872,157,2.275,158,3.628,159,4.226,160,3.705,161,4.226,162,3.705,163,2.039]],["title/controllers/BuildingController.html",[71,1.319,164,1.846]],["body/controllers/BuildingController.html",[0,0.015,3,0.258,4,0.258,5,0.181,9,0.344,10,1.218,15,0.901,17,1.762,18,0.039,19,1.174,20,0.846,21,1.592,28,1.697,30,0.42,32,0.493,37,0.258,38,1.422,69,0.022,70,0.022,71,1.016,73,1.016,76,1.697,78,1.274,81,1.13,82,2.08,112,0.55,164,2.09,165,1.888,166,1.621,167,2.09,168,2.731,169,2.09,170,2.09,171,2.478,172,1.888,173,2.702,174,2.293,175,4.695,176,2.293,177,2.293,178,2.293,179,3.371,180,2.293,181,4.909,182,2.293,183,3.371,184,2.293,185,2.293,186,2.865,187,2.293,188,2.293,189,2.775,190,2.383,191,2.293,192,1.888,193,1.888,194,2.293,195,1.969,196,1.888,197,1.422,198,2.775,199,1.422,200,2.293,201,3.371,202,1.888,203,2.293,204,2.293,205,2.293,206,2.293,207,2.293,208,2.293,209,2.293,210,2.293,211,2.293]],["title/modules/BuildingModule.html",[84,1.076,96,1.639]],["body/modules/BuildingModule.html",[0,0.022,3,0.383,4,0.383,5,0.268,18,0.039,30,0.516,32,0.731,37,0.383,69,0.029,70,0.029,73,1.963,84,1.781,86,1.507,87,1.507,88,1.871,89,1.871,90,1.507,91,2.713,92,1.871,96,3.057,99,2.439,100,1.871,101,1.871,103,2.403,110,2.403,111,1.675,112,0.815,164,3.055,195,2.736,196,2.799,212,2.799,213,2.799,214,3.399,215,3.399,216,2.799,217,3.399]],["title/injectables/BuildingService.html",[148,0.879,195,1.467]],["body/injectables/BuildingService.html",[0,0.014,3,0.241,4,0.241,5,0.169,9,0.321,10,1.157,12,1.577,15,0.919,17,1.823,18,0.039,19,1.215,20,0.876,21,1.648,28,1.648,30,0.456,32,0.46,37,0.241,40,1.326,69,0.021,70,0.021,78,1.251,81,1.054,82,1.887,111,1.054,112,0.768,148,0.945,149,1.054,157,2.121,163,1.177,167,1.984,168,2.64,169,1.984,170,1.984,171,2.378,172,2.635,173,2.51,186,2.808,195,1.577,197,1.326,198,2.635,199,1.326,216,1.761,218,1.761,219,4.626,220,2.139,221,3.506,222,2.139,223,3.201,224,2.139,225,4.372,226,2.139,227,3.201,228,2.139,229,3.201,230,2.139,231,2.139,232,2.139,233,1.761,234,2.139,235,1.512,236,2.139,237,2.139,238,2.139,239,3.201,240,2.635,241,2.139,242,2.139]],["title/classes/CreateBuildingDto.html",[0,0.019,173,1.639]],["body/classes/CreateBuildingDto.html",[0,0.028,2,1.654,3,0.378,4,0.378,5,0.265,9,0.504,15,0.844,18,0.039,19,1.171,20,0.844,30,0.419,37,0.378,69,0.028,70,0.028,76,1.588,78,1.246,112,1.054,156,1.757,157,2.171,158,3.463,173,2.419,243,4.033,244,2.374,245,3.107,246,2.419,247,3.618,248,3.358,249,3.358,250,3.463,251,1.848,252,4.033,253,3.037,254,1.848,255,2.165]],["title/classes/CreateLocationDto.html",[0,0.019,256,1.639]],["body/classes/CreateLocationDto.html",[0,0.023,2,1.237,3,0.283,4,0.283,5,0.198,9,0.377,15,0.883,18,0.038,19,0.959,20,0.883,30,0.343,37,0.283,58,2.231,69,0.023,70,0.023,76,1.661,78,1.214,112,0.602,114,1.946,156,1.439,157,1.865,245,3.249,246,1.981,247,2.066,250,3.44,251,1.382,252,4.006,253,2.849,254,1.382,255,2.265,256,1.981,257,4.006,258,1.774,259,3.44,260,2.974,261,2.679,262,2.849,263,2.963,264,2.51,265,2.51,266,2.51,267,2.51,268,2.066,269,3.784,270,3.784,271,2.51,272,3.784,273,3.784,274,3.784,275,2.963,276,2.974,277,2.066,278,1.774,279,2.963,280,2.066,281,2.066]],["title/entities/Location.html",[114,1.191,154,1.639]],["body/entities/Location.html",[0,0.019,3,0.325,4,0.325,5,0.228,9,0.433,15,0.984,18,0.039,19,0.769,20,0.984,30,0.378,37,0.325,69,0.026,70,0.026,76,1.853,78,1.27,112,1.301,113,2.377,114,1.588,141,1.79,154,2.186,156,1.588,157,2.272,159,3.737,161,4.22,163,1.59,259,3.209,260,3.209,261,2.499,262,2.462,282,2.377,283,3.972,284,3.972,285,3.972,286,3.972,287,2.807,288,2.888,289,2.888,290,2.888,291,2.888,292,2.888,293,2.888,294,3.972,295,3.972]],["title/controllers/LocationController.html",[71,1.319,296,1.846]],["body/controllers/LocationController.html",[0,0.015,3,0.255,4,0.255,5,0.179,9,0.34,10,1.208,12,1.118,14,1.208,15,0.897,17,1.753,18,0.039,19,1.168,20,0.842,21,1.584,22,1.603,28,1.689,30,0.445,32,0.488,37,0.255,69,0.022,70,0.022,71,1.005,73,1.005,76,1.689,78,1.27,81,1.118,82,2.071,125,1.867,166,1.603,167,2.073,168,2.717,169,2.073,170,2.073,171,2.462,189,3.27,190,2.364,192,1.867,193,1.867,197,1.406,199,1.406,202,1.867,235,2.364,256,2.691,261,2.691,296,2.073,297,1.867,298,1.867,299,1.867,300,2.268,301,2.268,302,1.867,303,3.344,304,2.268,305,1.867,306,3.344,307,2.268,308,1.867,309,2.856,310,3.344,311,2.268,312,2.268,313,1.647,314,1.867,315,2.753,316,2.268,317,2.268,318,2.268,319,2.268,320,2.268,321,2.268,322,2.268,323,2.268,324,2.268,325,2.268,326,2.268]],["title/modules/LocationModule.html",[84,1.076,97,1.639]],["body/modules/LocationModule.html",[0,0.021,3,0.36,4,0.36,5,0.252,18,0.039,30,0.52,32,0.689,37,0.36,69,0.028,70,0.028,73,1.887,84,1.729,86,1.419,87,1.419,88,1.762,89,1.762,90,1.419,91,2.634,92,1.762,97,3.116,98,2.691,99,2.344,100,1.762,101,1.762,103,3.01,110,2.263,111,1.577,114,1.28,119,2.636,296,2.967,313,2.691,314,2.636,327,2.636,328,2.636,329,3.202,330,3.202,331,3.202,332,2.636,333,3.202]],["title/injectables/LocationService.html",[148,0.879,313,1.467]],["body/injectables/LocationService.html",[0,0.01,3,0.176,4,0.176,5,0.123,9,0.235,10,0.908,12,1.238,15,0.809,17,1.577,18,0.04,19,1.051,20,0.757,21,1.426,28,1.426,30,0.401,32,0.337,37,0.176,40,2.851,52,2.445,69,0.016,70,0.016,78,1.103,81,0.772,82,1.114,111,0.772,112,0.755,114,1.898,148,0.742,149,0.772,157,1.748,163,0.862,166,2.225,167,1.558,168,1.951,169,1.558,170,1.558,171,1.951,197,0.971,199,0.971,219,4.237,221,2.966,225,3.787,233,1.289,235,1.107,240,2.069,246,1.384,256,2.318,261,2.789,262,1.951,278,1.107,298,1.289,299,2.069,302,2.069,305,1.289,308,1.289,309,2.436,313,1.238,315,2.069,332,1.289,334,1.289,335,1.566,336,1.566,337,2.513,338,1.566,339,1.566,340,1.566,341,1.566,342,1.566,343,3.148,344,2.513,345,1.566,346,3.603,347,1.566,348,1.566,349,2.592,350,1.566,351,1.566,352,1.566,353,2.513,354,1.566,355,2.513,356,1.566,357,1.566,358,2.966,359,1.566,360,1.566,361,1.566,362,3.148,363,3.148,364,1.566,365,2.513,366,1.566,367,1.566,368,1.566,369,1.566,370,1.566,371,1.566,372,1.566,373,1.566,374,1.566,375,2.513,376,3.148,377,1.566,378,1.566,379,2.513,380,1.566,381,1.107,382,3.148,383,1.289,384,1.566,385,1.566,386,1.566,387,1.566,388,1.566,389,1.566,390,1.566,391,1.566,392,1.566]],["title/modules/LoggerModule.html",[84,1.076,98,1.467]],["body/modules/LoggerModule.html",[0,0.023,3,0.399,4,0.399,5,0.279,14,2.155,18,0.038,30,0.434,32,0.763,37,0.399,69,0.029,70,0.029,84,1.817,86,1.571,87,1.571,88,1.952,89,1.952,90,1.571,91,2.768,92,2.768,98,2.814,99,2.506,100,1.952,101,1.952,393,2.919,394,2.919,395,2.919,396,3.546,397,3.546]],["title/injectables/LoggerService.html",[14,1.076,148,0.879]],["body/injectables/LoggerService.html",[0,0.016,3,0.283,4,0.283,5,0.198,9,0.378,10,1.303,12,2.077,14,1.303,15,1.002,17,2.027,18,0.039,19,1.351,20,0.973,21,1.832,28,1.832,29,4.174,30,0.24,32,0.541,37,0.283,58,3.02,62,2.55,63,2.969,69,0.023,70,0.023,78,1.011,148,1.065,149,1.24,398,2.073,399,3.607,400,3.47,401,3.607,402,3.607,403,3.607,404,3.607,405,2.517,406,3.607,407,2.517,408,3.607,409,2.517,410,3.607,411,2.517,412,3.607,413,2.517,414,3.607,415,3.607,416,2.517,417,3.607,418,2.517,419,3.607,420,2.517,421,2.517,422,3.607,423,2.073,424,2.517,425,2.517,426,2.517,427,2.517,428,2.517]],["title/injectables/LoggingInterceptor.html",[123,1.846,148,0.879]],["body/injectables/LoggingInterceptor.html",[0,0.016,3,0.284,4,0.284,5,0.199,7,2.079,9,0.379,10,1.306,12,1.244,13,2.079,14,1.666,15,0.694,17,1.445,18,0.04,19,0.963,20,0.694,21,1.306,22,2.555,28,0.913,30,0.439,32,0.543,33,3.258,34,2.976,36,2.079,37,0.284,38,1.565,40,2.857,56,4.016,62,1.785,69,0.023,70,0.023,81,1.244,82,1.119,123,2.241,148,1.067,149,1.244,190,2.984,349,2.079,381,1.785,429,2.079,430,3.615,431,2.525,432,3.615,433,4.609,434,4.222,435,4.609,436,2.525,437,2.525,438,4.222,439,3.615,440,2.079,441,2.525,442,2.525,443,2.525,444,2.525,445,2.525,446,4.609,447,3.615,448,3.615,449,2.525,450,2.525,451,2.525,452,2.525,453,2.525,454,2.525,455,2.525,456,2.525,457,2.525,458,2.525,459,2.525,460,2.525,461,2.525,462,2.525,463,2.525]],["title/classes/UpdateBuildingDto.html",[0,0.019,186,1.639]],["body/classes/UpdateBuildingDto.html",[0,0.03,2,1.801,3,0.412,4,0.412,5,0.288,9,0.548,15,0.702,18,0.039,19,1.237,20,0.702,21,1.678,30,0.442,37,0.412,69,0.03,70,0.03,76,1.321,78,1.113,112,0.877,156,1.856,158,3.606,186,2.556,244,2.584,245,2.584,250,3.281,251,2.012,253,2.878,254,2.012,255,1.801,464,3.822,465,3.656,466,3.656,467,3.822]],["title/classes/UpdateLocationDto.html",[0,0.019,309,1.639]],["body/classes/UpdateLocationDto.html",[0,0.023,2,1.218,3,0.278,4,0.278,5,0.195,9,0.371,15,0.876,18,0.038,19,0.949,20,0.876,21,1.821,30,0.339,37,0.278,58,2.207,69,0.023,70,0.023,76,1.65,78,1.208,112,0.593,114,1.934,156,1.424,157,1.849,246,1.96,251,1.361,253,2.83,254,1.361,255,2.249,258,1.747,259,3.42,260,2.949,261,2.663,262,2.83,263,2.931,268,2.035,269,3.758,270,3.758,272,3.758,273,3.758,274,3.758,275,2.931,276,2.949,277,2.035,278,1.747,279,2.931,280,2.035,281,2.035,309,1.96,467,3.758,468,3.983,469,4.565,470,2.472,471,2.472,472,2.472,473,2.472,474,2.472,475,2.472,476,4.838]],["title/coverage.html",[477,3.339]],["body/coverage.html",[0,0.033,1,2.056,5,0.229,6,2.394,14,1.051,18,0.039,20,0.558,52,1.803,69,0.026,70,0.026,71,2.019,72,1.803,74,2.394,79,1.433,90,1.289,112,0.697,114,1.163,123,1.803,148,1.518,150,2.394,154,2.197,155,2.394,164,1.803,165,2.394,173,1.601,186,1.601,195,1.433,218,2.394,243,2.394,244,2.821,256,1.601,257,2.394,258,2.821,282,2.394,296,1.803,297,2.394,309,1.601,313,1.433,334,2.394,381,4.184,398,2.394,429,2.394,464,2.394,468,2.394,477,2.394,478,2.394,479,2.908,480,2.908,481,4.556,482,3.991,483,3.991,484,4.556,485,4.556,486,3.991,487,2.394,488,2.908,489,2.908,490,2.908,491,2.908]],["title/dependencies.html",[87,1.586,492,2.05]],["body/dependencies.html",[0,0.03,18,0.04,32,0.769,35,3.769,69,0.03,70,0.03,87,1.585,111,1.762,118,2.944,122,2.944,163,1.969,251,1.969,254,1.969,440,2.944,493,3.576,494,3.576,495,5.049,496,3.576,497,3.576,498,3.576,499,3.576,500,3.576,501,3.576,502,3.576,503,3.576,504,3.576,505,3.576,506,3.576,507,3.576,508,3.576,509,3.576,510,3.576,511,3.576,512,3.576,513,2.944,514,3.576,515,3.576,516,3.576]],["title/miscellaneous/functions.html",[517,2.05,518,2.946]],["body/miscellaneous/functions.html",[9,0.678,18,0.034,69,0.034,70,0.034,90,2.481,487,3.718,517,3.718,518,3.718,519,4.516]],["title/index.html",[9,0.374,520,2.49,521,2.49]],["body/index.html",[5,0.303,17,1.101,18,0.036,27,3.163,30,0.262,33,1.946,61,3.163,65,3.163,69,0.025,70,0.025,131,2.266,133,3.163,139,2.266,246,1.515,255,1.356,276,1.946,287,1.946,358,2.266,383,2.266,400,2.266,423,2.266,478,3.163,513,2.266,522,5.356,523,2.753,524,3.842,525,3.842,526,4.79,527,2.753,528,2.753,529,5.356,530,4.426,531,3.842,532,2.753,533,3.842,534,2.753,535,2.753,536,2.753,537,2.753,538,2.753,539,2.753,540,2.753,541,2.753,542,3.842,543,2.753,544,2.753,545,4.426,546,4.426,547,3.842,548,2.753,549,2.753,550,2.753,551,2.753,552,2.753,553,2.753,554,2.753,555,2.753,556,2.753,557,2.753,558,2.753,559,2.753,560,3.842,561,3.842,562,2.753,563,2.753,564,2.753,565,2.753,566,3.842,567,2.753,568,2.753,569,3.842,570,2.753,571,2.753,572,2.753,573,2.753,574,2.753,575,2.753,576,2.753,577,2.753,578,2.753,579,2.753,580,2.753,581,2.753,582,2.266]],["title/modules.html",[86,1.797]],["body/modules.html",[18,0.033,69,0.033,70,0.033,85,2.614,86,1.869,96,2.321,97,2.321,98,2.077,583,5.642,584,5.642,585,5.642,586,5.642]],["title/overview.html",[587,3.339]],["body/overview.html",[2,1.559,14,2.008,18,0.038,69,0.027,70,0.027,73,1.402,79,2.344,84,1.144,85,3.58,86,1.402,87,1.402,88,1.742,89,1.742,90,1.402,91,1.742,92,1.742,93,2.605,94,2.605,95,2.605,96,2.912,97,3.059,98,2.738,99,2.326,100,1.742,101,1.742,141,1.962,149,1.559,195,2.344,212,2.605,213,2.605,287,2.237,313,2.344,327,2.605,328,2.605,393,2.605,394,2.605,395,2.605,582,2.605,587,2.605,588,3.165,589,4.226]],["title/properties.html",[156,1.431,492,2.05]],["body/properties.html",[18,0.038,69,0.034,70,0.034,156,1.777,255,2.189,590,4.443,591,4.443,592,4.443,593,4.443,594,4.443]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Building.html":{},"controllers/BuildingController.html":{},"modules/BuildingModule.html":{},"injectables/BuildingService.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"modules/LocationModule.html":{},"injectables/LocationService.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":381,"title":{},"body":{"injectables/LocationService.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["0.0.1",{"_index":591,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":504,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":509,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":516,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":503,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":485,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":481,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":484,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":486,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":482,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":483,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":489,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":358,"title":{},"body":{"injectables/LocationService.html":{},"index.html":{}}}],["1.1.26",{"_index":494,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":285,"title":{},"body":{"entities/Location.html":{}}}],["10.0.0",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":501,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":287,"title":{},"body":{"entities/Location.html":{},"index.html":{},"overview.html":{}}}],["2.9.0",{"_index":512,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":582,"title":{},"body":{"index.html":{},"overview.html":{}}}],["3.3.0",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":579,"title":{},"body":{"index.html":{}}}],["4",{"_index":588,"title":{},"body":{"overview.html":{}}}],["5",{"_index":589,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":515,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["7.8.1",{"_index":510,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":500,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":506,"title":{},"body":{"dependencies.html":{}}}],["8080",{"_index":536,"title":{},"body":{"index.html":{}}}],["9",{"_index":274,"title":{},"body":{"classes/CreateLocationDto.html":{},"classes/UpdateLocationDto.html":{}}}],["according",{"_index":556,"title":{},"body":{"index.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["apiproperty",{"_index":250,"title":{},"body":{"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"classes/UpdateBuildingDto.html":{}}}],["apiproperty({description",{"_index":245,"title":{},"body":{"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"classes/UpdateBuildingDto.html":{}}}],["apipropertyoptional",{"_index":476,"title":{},"body":{"classes/UpdateLocationDto.html":{}}}],["apipropertyoptional({description",{"_index":469,"title":{},"body":{"classes/UpdateLocationDto.html":{}}}],["apis",{"_index":561,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":80,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_filter",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":72,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":85,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":79,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["area",{"_index":259,"title":{},"body":{"classes/CreateLocationDto.html":{},"entities/Location.html":{},"classes/UpdateLocationDto.html":{}}}],["argumentshost",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["assignment",{"_index":523,"title":{},"body":{"index.html":{}}}],["assignment's",{"_index":558,"title":{},"body":{"index.html":{}}}],["async",{"_index":219,"title":{},"body":{"injectables/BuildingService.html":{},"injectables/LocationService.html":{}}}],["author",{"_index":594,"title":{},"body":{"properties.html":{}}}],["await",{"_index":240,"title":{},"body":{"injectables/BuildingService.html":{},"injectables/LocationService.html":{}}}],["badrequestexception",{"_index":343,"title":{},"body":{"injectables/LocationService.html":{}}}],["basic",{"_index":563,"title":{},"body":{"index.html":{}}}],["body",{"_index":190,"title":{},"body":{"controllers/BuildingController.html":{},"controllers/LocationController.html":{},"injectables/LoggingInterceptor.html":{}}}],["bootstrap",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/BuildingModule.html":{},"modules/LocationModule.html":{},"modules/LoggerModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":383,"title":{},"body":{"injectables/LocationService.html":{},"index.html":{}}}],["both4",{"_index":540,"title":{},"body":{"index.html":{}}}],["browse",{"_index":586,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":583,"title":{},"body":{"modules.html":{}}}],["building",{"_index":112,"title":{"entities/Building.html":{}},"body":{"modules/AppModule.html":{},"entities/Building.html":{},"controllers/BuildingController.html":{},"modules/BuildingModule.html":{},"injectables/BuildingService.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"injectables/LocationService.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{},"coverage.html":{}}}],["building'})@isnotempty()@isstring",{"_index":247,"title":{},"body":{"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{}}}],["building'})@isoptional()@isstring",{"_index":465,"title":{},"body":{"classes/UpdateBuildingDto.html":{}}}],["building'})@isstring",{"_index":472,"title":{},"body":{"classes/UpdateLocationDto.html":{}}}],["building.controller",{"_index":215,"title":{},"body":{"modules/BuildingModule.html":{}}}],["building.dto",{"_index":198,"title":{},"body":{"controllers/BuildingController.html":{},"injectables/BuildingService.html":{}}}],["building.dto.ts",{"_index":244,"title":{},"body":{"classes/CreateBuildingDto.html":{},"classes/UpdateBuildingDto.html":{},"coverage.html":{}}}],["building.dto.ts:12",{"_index":249,"title":{},"body":{"classes/CreateBuildingDto.html":{}}}],["building.dto.ts:7",{"_index":248,"title":{},"body":{"classes/CreateBuildingDto.html":{}}}],["building.dto.ts:8",{"_index":466,"title":{},"body":{"classes/UpdateBuildingDto.html":{}}}],["building.service",{"_index":196,"title":{},"body":{"controllers/BuildingController.html":{},"modules/BuildingModule.html":{}}}],["building/building.module",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["building/entities/building.entity",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"entities/Location.html":{}}}],["building_code",{"_index":157,"title":{},"body":{"entities/Building.html":{},"injectables/BuildingService.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"injectables/LocationService.html":{},"classes/UpdateLocationDto.html":{}}}],["building_name",{"_index":158,"title":{},"body":{"entities/Building.html":{},"classes/CreateBuildingDto.html":{},"classes/UpdateBuildingDto.html":{}}}],["buildingcode",{"_index":270,"title":{},"body":{"classes/CreateLocationDto.html":{},"classes/UpdateLocationDto.html":{}}}],["buildingcontroller",{"_index":164,"title":{"controllers/BuildingController.html":{}},"body":{"controllers/BuildingController.html":{},"modules/BuildingModule.html":{},"coverage.html":{}}}],["buildingmodule",{"_index":96,"title":{"modules/BuildingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BuildingModule.html":{},"modules.html":{},"overview.html":{}}}],["buildingrepository",{"_index":223,"title":{},"body":{"injectables/BuildingService.html":{}}}],["buildingservice",{"_index":195,"title":{"injectables/BuildingService.html":{}},"body":{"controllers/BuildingController.html":{},"modules/BuildingModule.html":{},"injectables/BuildingService.html":{},"coverage.html":{},"overview.html":{}}}],["callhandler",{"_index":435,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["catch",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["catch(exception",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["catcherror",{"_index":442,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["catcherror((error",{"_index":460,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["centrailzed",{"_index":575,"title":{},"body":{"index.html":{}}}],["centralized",{"_index":567,"title":{},"body":{"index.html":{}}}],["change",{"_index":555,"title":{},"body":{"index.html":{}}}],["check",{"_index":581,"title":{},"body":{"index.html":{}}}],["checklist",{"_index":559,"title":{},"body":{"index.html":{}}}],["child",{"_index":354,"title":{},"body":{"injectables/LocationService.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Building.html":{},"controllers/BuildingController.html":{},"modules/BuildingModule.html":{},"injectables/BuildingService.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"modules/LocationModule.html":{},"injectables/LocationService.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{},"overview.html":{}}}],["clean",{"_index":576,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_buildingmodule",{"_index":212,"title":{},"body":{"modules/BuildingModule.html":{},"overview.html":{}}}],["cluster_buildingmodule_providers",{"_index":213,"title":{},"body":{"modules/BuildingModule.html":{},"overview.html":{}}}],["cluster_locationmodule",{"_index":327,"title":{},"body":{"modules/LocationModule.html":{},"overview.html":{}}}],["cluster_locationmodule_imports",{"_index":329,"title":{},"body":{"modules/LocationModule.html":{}}}],["cluster_locationmodule_providers",{"_index":328,"title":{},"body":{"modules/LocationModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":393,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":394,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":395,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["code",{"_index":246,"title":{},"body":{"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"injectables/LocationService.html":{},"classes/UpdateLocationDto.html":{},"index.html":{}}}],["column",{"_index":161,"title":{},"body":{"entities/Building.html":{},"entities/Location.html":{}}}],["column('decimal",{"_index":283,"title":{},"body":{"entities/Location.html":{}}}],["compile",{"_index":528,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":535,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_database",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["configurations",{"_index":554,"title":{},"body":{"index.html":{}}}],["connection",{"_index":552,"title":{},"body":{"index.html":{}}}],["const",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/BuildingService.html":{},"injectables/LocationService.html":{},"injectables/LoggingInterceptor.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/BuildingService.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{}}}],["constructor(buildingrepository",{"_index":220,"title":{},"body":{"injectables/BuildingService.html":{}}}],["constructor(locationrepository",{"_index":335,"title":{},"body":{"injectables/LocationService.html":{}}}],["constructor(mylogger",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["constructor(private",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/BuildingController.html":{},"injectables/LoggingInterceptor.html":{}}}],["context",{"_index":437,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":445,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["controller",{"_index":71,"title":{"controllers/AppController.html":{},"controllers/BuildingController.html":{},"controllers/LocationController.html":{}},"body":{"controllers/AppController.html":{},"controllers/BuildingController.html":{},"controllers/LocationController.html":{},"coverage.html":{}}}],["controller('building",{"_index":200,"title":{},"body":{"controllers/BuildingController.html":{}}}],["controller('locations",{"_index":316,"title":{},"body":{"controllers/LocationController.html":{}}}],["controllers",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BuildingController.html":{},"modules/BuildingModule.html":{},"controllers/LocationController.html":{},"modules/LocationModule.html":{},"overview.html":{}}}],["coverage",{"_index":477,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":167,"title":{},"body":{"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{}}}],["create(@body",{"_index":202,"title":{},"body":{"controllers/BuildingController.html":{},"controllers/LocationController.html":{}}}],["create(createbuildingdto",{"_index":172,"title":{},"body":{"controllers/BuildingController.html":{},"injectables/BuildingService.html":{}}}],["create(createlocationdto",{"_index":299,"title":{},"body":{"controllers/LocationController.html":{},"injectables/LocationService.html":{}}}],["createbuildingdto",{"_index":173,"title":{"classes/CreateBuildingDto.html":{}},"body":{"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"classes/CreateBuildingDto.html":{},"coverage.html":{}}}],["createlocationdto",{"_index":256,"title":{"classes/CreateLocationDto.html":{}},"body":{"classes/CreateLocationDto.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{},"coverage.html":{}}}],["ctx",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ctx.getrequest",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ctx.getresponse",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["database",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["date().toisostring",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["date.now",{"_index":448,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["db",{"_index":545,"title":{},"body":{"index.html":{}}}],["debug",{"_index":401,"title":{},"body":{"injectables/LoggerService.html":{}}}],["debug(message",{"_index":406,"title":{},"body":{"injectables/LoggerService.html":{}}}],["declarations",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/BuildingModule.html":{},"modules/LocationModule.html":{},"modules/LoggerModule.html":{},"overview.html":{}}}],["decorators",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"entities/Building.html":{},"controllers/BuildingController.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{}}}],["default",{"_index":578,"title":{},"body":{"index.html":{}}}],["defined",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Building.html":{},"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{}}}],["delete",{"_index":193,"title":{},"body":{"controllers/BuildingController.html":{},"controllers/LocationController.html":{}}}],["delete(':id",{"_index":183,"title":{},"body":{"controllers/BuildingController.html":{}}}],["delete(':location_number",{"_index":306,"title":{},"body":{"controllers/LocationController.html":{}}}],["dependencies",{"_index":87,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/BuildingModule.html":{},"modules/LocationModule.html":{},"modules/LoggerModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":255,"title":{},"body":{"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{},"index.html":{},"properties.html":{}}}],["determine",{"_index":386,"title":{},"body":{"injectables/LocationService.html":{}}}],["dev",{"_index":532,"title":{},"body":{"index.html":{}}}],["deveploment",{"_index":544,"title":{},"body":{"index.html":{}}}],["disable",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["distinct",{"_index":371,"title":{},"body":{"injectables/LocationService.html":{}}}],["docs",{"_index":537,"title":{},"body":{"index.html":{}}}],["documenation",{"_index":538,"title":{},"body":{"index.html":{}}}],["documentated",{"_index":577,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":478,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto/create",{"_index":197,"title":{},"body":{"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{}}}],["dto/update",{"_index":199,"title":{},"body":{"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{}}}],["dump",{"_index":543,"title":{},"body":{"index.html":{}}}],["entities",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"entities/Building.html":{},"entities/Location.html":{},"overview.html":{}}}],["entities/building.entity",{"_index":216,"title":{},"body":{"modules/BuildingModule.html":{},"injectables/BuildingService.html":{}}}],["entities/location.entity",{"_index":332,"title":{},"body":{"modules/LocationModule.html":{},"injectables/LocationService.html":{}}}],["entity",{"_index":154,"title":{"entities/Building.html":{},"entities/Location.html":{}},"body":{"entities/Building.html":{},"entities/Location.html":{},"coverage.html":{}}}],["env",{"_index":550,"title":{},"body":{"index.html":{}}}],["enviroment",{"_index":557,"title":{},"body":{"index.html":{}}}],["error",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{}}}],["error(message",{"_index":408,"title":{},"body":{"injectables/LoggerService.html":{}}}],["error.message",{"_index":463,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["errorresponse",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["eslint",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["example",{"_index":525,"title":{},"body":{"index.html":{}}}],["exception",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"index.html":{}}}],["exception.getstatus",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.message",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions",{"_index":66,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["executioncontext",{"_index":433,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["existence",{"_index":353,"title":{},"body":{"injectables/LocationService.html":{}}}],["export",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Building.html":{},"controllers/BuildingController.html":{},"modules/BuildingModule.html":{},"injectables/BuildingService.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"modules/LocationModule.html":{},"injectables/LocationService.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{}}}],["exports",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/BuildingModule.html":{},"modules/LocationModule.html":{},"modules/LoggerModule.html":{},"overview.html":{}}}],["express",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":399,"title":{},"body":{"injectables/LoggerService.html":{}}}],["failed",{"_index":462,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["false",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Building.html":{},"controllers/BuildingController.html":{},"modules/BuildingModule.html":{},"injectables/BuildingService.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"modules/LocationModule.html":{},"injectables/LocationService.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{},"coverage.html":{},"index.html":{}}}],["filter",{"_index":568,"title":{},"body":{"index.html":{}}}],["finalnewlocationnumber",{"_index":388,"title":{},"body":{"injectables/LocationService.html":{}}}],["finalnewlocationnumber.split",{"_index":391,"title":{},"body":{"injectables/LocationService.html":{}}}],["findall",{"_index":168,"title":{},"body":{"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{}}}],["findone",{"_index":169,"title":{},"body":{"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{}}}],["findone(@param('id",{"_index":205,"title":{},"body":{"controllers/BuildingController.html":{}}}],["findone(@param('location_number",{"_index":321,"title":{},"body":{"controllers/LocationController.html":{}}}],["findone(building_code",{"_index":227,"title":{},"body":{"injectables/BuildingService.html":{}}}],["findone(id",{"_index":178,"title":{},"body":{"controllers/BuildingController.html":{}}}],["findone(location_number",{"_index":302,"title":{},"body":{"controllers/LocationController.html":{},"injectables/LocationService.html":{}}}],["first",{"_index":548,"title":{},"body":{"index.html":{}}}],["folder",{"_index":546,"title":{},"body":{"index.html":{}}}],["follow",{"_index":275,"title":{},"body":{"classes/CreateLocationDto.html":{},"classes/UpdateLocationDto.html":{}}}],["format",{"_index":269,"title":{},"body":{"classes/CreateLocationDto.html":{},"classes/UpdateLocationDto.html":{}}}],["found",{"_index":374,"title":{},"body":{"injectables/LocationService.html":{}}}],["function",{"_index":488,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":518,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":534,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":179,"title":{},"body":{"controllers/BuildingController.html":{}}}],["get(':location_number",{"_index":303,"title":{},"body":{"controllers/LocationController.html":{}}}],["gethello",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":520,"title":{"index.html":{}},"body":{}}],["handle",{"_index":564,"title":{},"body":{"index.html":{}}}],["handled",{"_index":565,"title":{},"body":{"index.html":{}}}],["hello",{"_index":152,"title":{},"body":{"injectables/AppService.html":{}}}],["hierarchy",{"_index":390,"title":{},"body":{"injectables/LocationService.html":{}}}],["host",{"_index":24,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{}}}],["host.switchtohttp",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["http",{"_index":65,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"index.html":{}}}],["httpexception",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["id",{"_index":181,"title":{},"body":{"controllers/BuildingController.html":{}}}],["identifier",{"_index":479,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":573,"title":{},"body":{"index.html":{}}}],["implements",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["import",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Building.html":{},"controllers/BuildingController.html":{},"modules/BuildingModule.html":{},"injectables/BuildingService.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"modules/LocationModule.html":{},"injectables/LocationService.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{},"index.html":{}}}],["imports",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/BuildingModule.html":{},"modules/LocationModule.html":{}}}],["included",{"_index":542,"title":{},"body":{"index.html":{}}}],["includes",{"_index":551,"title":{},"body":{"index.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Building.html":{},"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Building.html":{},"controllers/BuildingController.html":{},"modules/BuildingModule.html":{},"injectables/BuildingService.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"modules/LocationModule.html":{},"injectables/LocationService.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{}}}],["inject",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":148,"title":{"injectables/AppService.html":{},"injectables/BuildingService.html":{},"injectables/LocationService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{}},"body":{"injectables/AppService.html":{},"injectables/BuildingService.html":{},"injectables/LocationService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["injectables",{"_index":149,"title":{},"body":{"injectables/AppService.html":{},"injectables/BuildingService.html":{},"injectables/LocationService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"overview.html":{}}}],["injectrepository",{"_index":233,"title":{},"body":{"injectables/BuildingService.html":{},"injectables/LocationService.html":{}}}],["injectrepository(building",{"_index":234,"title":{},"body":{"injectables/BuildingService.html":{}}}],["injectrepository(location",{"_index":345,"title":{},"body":{"injectables/LocationService.html":{}}}],["inner",{"_index":366,"title":{},"body":{"injectables/LocationService.html":{}}}],["install3",{"_index":527,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["intercept",{"_index":430,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["intercept(context",{"_index":432,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["interceptor",{"_index":570,"title":{},"body":{"index.html":{}}}],["internal",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["isdecimal",{"_index":279,"title":{},"body":{"classes/CreateLocationDto.html":{},"classes/UpdateLocationDto.html":{}}}],["isglobal",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":252,"title":{},"body":{"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{}}}],["isoptional",{"_index":467,"title":{},"body":{"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{}}}],["isstring",{"_index":253,"title":{},"body":{"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{}}}],["join",{"_index":367,"title":{},"body":{"injectables/LocationService.html":{}}}],["joincolumn",{"_index":295,"title":{},"body":{"entities/Location.html":{}}}],["json.stringify(body",{"_index":452,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["json.stringify(response",{"_index":459,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["l",{"_index":365,"title":{},"body":{"injectables/LocationService.html":{}}}],["l.location_number",{"_index":369,"title":{},"body":{"injectables/LocationService.html":{}}}],["legend",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/BuildingModule.html":{},"modules/LocationModule.html":{},"modules/LoggerModule.html":{},"overview.html":{}}}],["license",{"_index":592,"title":{},"body":{"properties.html":{}}}],["live",{"_index":530,"title":{},"body":{"index.html":{}}}],["localhost:3000/swagger",{"_index":580,"title":{},"body":{"index.html":{}}}],["location",{"_index":114,"title":{"entities/Location.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"modules/LocationModule.html":{},"injectables/LocationService.html":{},"classes/UpdateLocationDto.html":{},"coverage.html":{}}}],["location'})@isnotempty()@isstring",{"_index":267,"title":{},"body":{"classes/CreateLocationDto.html":{}}}],["location'})@isoptional()@isstring",{"_index":474,"title":{},"body":{"classes/UpdateLocationDto.html":{}}}],["location.controller",{"_index":331,"title":{},"body":{"modules/LocationModule.html":{}}}],["location.dto",{"_index":315,"title":{},"body":{"controllers/LocationController.html":{},"injectables/LocationService.html":{}}}],["location.dto.ts",{"_index":258,"title":{},"body":{"classes/CreateLocationDto.html":{},"classes/UpdateLocationDto.html":{},"coverage.html":{}}}],["location.dto.ts:13",{"_index":277,"title":{},"body":{"classes/CreateLocationDto.html":{},"classes/UpdateLocationDto.html":{}}}],["location.dto.ts:18",{"_index":268,"title":{},"body":{"classes/CreateLocationDto.html":{},"classes/UpdateLocationDto.html":{}}}],["location.dto.ts:23",{"_index":265,"title":{},"body":{"classes/CreateLocationDto.html":{}}}],["location.dto.ts:25",{"_index":471,"title":{},"body":{"classes/UpdateLocationDto.html":{}}}],["location.dto.ts:28",{"_index":266,"title":{},"body":{"classes/CreateLocationDto.html":{}}}],["location.dto.ts:29",{"_index":473,"title":{},"body":{"classes/UpdateLocationDto.html":{}}}],["location.location_number",{"_index":377,"title":{},"body":{"injectables/LocationService.html":{}}}],["location.service",{"_index":314,"title":{},"body":{"controllers/LocationController.html":{},"modules/LocationModule.html":{}}}],["location/entities/location.entity",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["location/location.module",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["location_name",{"_index":260,"title":{},"body":{"classes/CreateLocationDto.html":{},"entities/Location.html":{},"classes/UpdateLocationDto.html":{}}}],["location_number",{"_index":261,"title":{},"body":{"classes/CreateLocationDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{},"classes/UpdateLocationDto.html":{}}}],["location_number.split",{"_index":356,"title":{},"body":{"injectables/LocationService.html":{}}}],["location_number.startswith(building_code",{"_index":348,"title":{},"body":{"injectables/LocationService.html":{}}}],["locationcontroller",{"_index":296,"title":{"controllers/LocationController.html":{}},"body":{"controllers/LocationController.html":{},"modules/LocationModule.html":{},"coverage.html":{}}}],["locationmodule",{"_index":97,"title":{"modules/LocationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LocationModule.html":{},"modules.html":{},"overview.html":{}}}],["locationrepository",{"_index":337,"title":{},"body":{"injectables/LocationService.html":{}}}],["locations",{"_index":298,"title":{},"body":{"controllers/LocationController.html":{},"injectables/LocationService.html":{}}}],["locationservice",{"_index":313,"title":{"injectables/LocationService.html":{}},"body":{"controllers/LocationController.html":{},"modules/LocationModule.html":{},"injectables/LocationService.html":{},"coverage.html":{},"overview.html":{}}}],["locationsservice",{"_index":317,"title":{},"body":{"controllers/LocationController.html":{}}}],["locationtree",{"_index":362,"title":{},"body":{"injectables/LocationService.html":{}}}],["log",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggerService.html":{}}}],["log(message",{"_index":410,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logger",{"_index":400,"title":{},"body":{"injectables/LoggerService.html":{},"index.html":{}}}],["logger.service",{"_index":397,"title":{},"body":{"modules/LoggerModule.html":{}}}],["logger/logger.service",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["loggermodule",{"_index":98,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LocationModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["loggerservice",{"_index":14,"title":{"injectables/LoggerService.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/LocationController.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["logging",{"_index":574,"title":{},"body":{"index.html":{}}}],["logginginterceptor",{"_index":123,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["logginginterceptor(loggingservice",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["loggingservice",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["lt",{"_index":368,"title":{},"body":{"injectables/LocationService.html":{}}}],["lt.location_number",{"_index":370,"title":{},"body":{"injectables/LocationService.html":{}}}],["made",{"_index":562,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":294,"title":{},"body":{"entities/Location.html":{}}}],["manytoone(undefined)@joincolumn({name",{"_index":289,"title":{},"body":{"entities/Location.html":{}}}],["match",{"_index":385,"title":{},"body":{"injectables/LocationService.html":{}}}],["matches",{"_index":278,"title":{},"body":{"classes/CreateLocationDto.html":{},"injectables/LocationService.html":{},"classes/UpdateLocationDto.html":{}}}],["matches(/^[a",{"_index":280,"title":{},"body":{"classes/CreateLocationDto.html":{},"classes/UpdateLocationDto.html":{}}}],["matching",{"_index":70,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Building.html":{},"controllers/BuildingController.html":{},"modules/BuildingModule.html":{},"injectables/BuildingService.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"modules/LocationModule.html":{},"injectables/LocationService.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["message",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/CreateLocationDto.html":{},"injectables/LoggerService.html":{},"classes/UpdateLocationDto.html":{}}}],["metadata",{"_index":508,"title":{},"body":{"dependencies.html":{}}}],["meters",{"_index":281,"title":{},"body":{"classes/CreateLocationDto.html":{},"classes/UpdateLocationDto.html":{}}}],["meters'})@isnotempty()@isdecimal",{"_index":264,"title":{},"body":{"classes/CreateLocationDto.html":{}}}],["meters'})@isoptional()@isdecimal",{"_index":470,"title":{},"body":{"classes/UpdateLocationDto.html":{}}}],["method",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["methods",{"_index":10,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{}}}],["miscellaneous",{"_index":517,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["module",{"_index":84,"title":{"modules/AppModule.html":{},"modules/BuildingModule.html":{},"modules/LocationModule.html":{},"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BuildingModule.html":{},"modules/LocationModule.html":{},"modules/LoggerModule.html":{},"overview.html":{}}}],["modules",{"_index":86,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/BuildingModule.html":{},"modules/LocationModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["mycontext",{"_index":414,"title":{},"body":{"injectables/LoggerService.html":{}}}],["mylogger",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/LocationController.html":{},"injectables/LoggingInterceptor.html":{}}}],["n",{"_index":458,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["name",{"_index":19,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{}}}],["nestinterceptor",{"_index":439,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["nestjs/common",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/BuildingController.html":{},"modules/BuildingModule.html":{},"injectables/BuildingService.html":{},"controllers/LocationController.html":{},"modules/LocationModule.html":{},"injectables/LocationService.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":251,"title":{},"body":{"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/BuildingModule.html":{},"injectables/BuildingService.html":{},"modules/LocationModule.html":{},"injectables/LocationService.html":{},"dependencies.html":{}}}],["new",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/LocationService.html":{},"coverage.html":{}}}],["newbuildingcode",{"_index":378,"title":{},"body":{"injectables/LocationService.html":{}}}],["newbuildingcode}${location_number.slice(location_number.indexof",{"_index":389,"title":{},"body":{"injectables/LocationService.html":{}}}],["newlocationnumber",{"_index":375,"title":{},"body":{"injectables/LocationService.html":{}}}],["newlocationnumber.split",{"_index":380,"title":{},"body":{"injectables/LocationService.html":{}}}],["newlocationnumber.startswith(updatelocationdto.building_code",{"_index":384,"title":{},"body":{"injectables/LocationService.html":{}}}],["next",{"_index":434,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["next.handle().pipe",{"_index":453,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["non",{"_index":64,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["notes",{"_index":541,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":344,"title":{},"body":{"injectables/LocationService.html":{}}}],["now",{"_index":447,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":526,"title":{},"body":{"index.html":{}}}],["number",{"_index":262,"title":{},"body":{"classes/CreateLocationDto.html":{},"entities/Location.html":{},"injectables/LocationService.html":{},"classes/UpdateLocationDto.html":{}}}],["object.keys(body).length",{"_index":450,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["observable",{"_index":438,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["optional",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{}}}],["out",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/BuildingModule.html":{},"modules/LocationModule.html":{},"modules/LoggerModule.html":{},"overview.html":{}}}],["overview",{"_index":587,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":492,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":192,"title":{},"body":{"controllers/BuildingController.html":{},"controllers/LocationController.html":{}}}],["param('id",{"_index":208,"title":{},"body":{"controllers/BuildingController.html":{}}}],["param('location_number",{"_index":323,"title":{},"body":{"controllers/LocationController.html":{}}}],["parameters",{"_index":17,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"index.html":{}}}],["parent",{"_index":352,"title":{},"body":{"injectables/LocationService.html":{}}}],["password",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["patch",{"_index":191,"title":{},"body":{"controllers/BuildingController.html":{}}}],["patch(':id",{"_index":207,"title":{},"body":{"controllers/BuildingController.html":{}}}],["patch(':id')@usepipes(new",{"_index":187,"title":{},"body":{"controllers/BuildingController.html":{}}}],["path",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["pg",{"_index":505,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":547,"title":{},"body":{"index.html":{}}}],["port",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["post",{"_index":189,"title":{},"body":{"controllers/BuildingController.html":{},"controllers/LocationController.html":{}}}],["post()@usepipes(new",{"_index":174,"title":{},"body":{"controllers/BuildingController.html":{}}}],["postgres",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["precision",{"_index":284,"title":{},"body":{"entities/Location.html":{}}}],["prefix",{"_index":166,"title":{},"body":{"controllers/BuildingController.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{}}}],["prettier/prettier",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["primarycolumn",{"_index":159,"title":{},"body":{"entities/Building.html":{},"entities/Location.html":{}}}],["private",{"_index":235,"title":{},"body":{"injectables/BuildingService.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{}}}],["project",{"_index":522,"title":{},"body":{"index.html":{}}}],["promise",{"_index":225,"title":{},"body":{"injectables/BuildingService.html":{},"injectables/LocationService.html":{}}}],["properties",{"_index":156,"title":{"properties.html":{}},"body":{"entities/Building.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{},"properties.html":{}}}],["provide",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":382,"title":{},"body":{"injectables/LocationService.html":{}}}],["providers",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/BuildingModule.html":{},"modules/LocationModule.html":{},"modules/LoggerModule.html":{},"overview.html":{}}}],["put",{"_index":312,"title":{},"body":{"controllers/LocationController.html":{}}}],["put(':location_number",{"_index":310,"title":{},"body":{"controllers/LocationController.html":{}}}],["query",{"_index":360,"title":{},"body":{"injectables/LocationService.html":{}}}],["readonly",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{},"injectables/LoggingInterceptor.html":{}}}],["recursive",{"_index":361,"title":{},"body":{"injectables/LocationService.html":{}}}],["reflect",{"_index":507,"title":{},"body":{"dependencies.html":{}}}],["related",{"_index":553,"title":{},"body":{"index.html":{}}}],["reload",{"_index":531,"title":{},"body":{"index.html":{}}}],["remove",{"_index":170,"title":{},"body":{"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{}}}],["remove(@param('id",{"_index":210,"title":{},"body":{"controllers/BuildingController.html":{}}}],["remove(@param('location_number",{"_index":325,"title":{},"body":{"controllers/LocationController.html":{}}}],["remove(building_code",{"_index":229,"title":{},"body":{"injectables/BuildingService.html":{}}}],["remove(id",{"_index":182,"title":{},"body":{"controllers/BuildingController.html":{}}}],["remove(location_number",{"_index":305,"title":{},"body":{"controllers/LocationController.html":{},"injectables/LocationService.html":{}}}],["repository",{"_index":221,"title":{},"body":{"injectables/BuildingService.html":{},"injectables/LocationService.html":{}}}],["request",{"_index":33,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{},"index.html":{}}}],["request.method",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["request.url",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["reset",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/BuildingModule.html":{},"modules/LocationModule.html":{},"modules/LoggerModule.html":{},"overview.html":{}}}],["response",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["response.status(status).json(errorresponse",{"_index":68,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responsetime",{"_index":455,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["responsetime}ms",{"_index":457,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["results",{"_index":69,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Building.html":{},"controllers/BuildingController.html":{},"modules/BuildingModule.html":{},"injectables/BuildingService.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"modules/LocationModule.html":{},"injectables/LocationService.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{},"injectables/LoggingInterceptor.html":{}}}],["returns",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{}}}],["run",{"_index":529,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":440,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":443,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["same",{"_index":351,"title":{},"body":{"injectables/LocationService.html":{}}}],["save",{"_index":511,"title":{},"body":{"dependencies.html":{}}}],["scale",{"_index":286,"title":{},"body":{"entities/Location.html":{}}}],["scope",{"_index":419,"title":{},"body":{"injectables/LoggerService.html":{}}}],["scope.transient",{"_index":420,"title":{},"body":{"injectables/LoggerService.html":{}}}],["section",{"_index":276,"title":{},"body":{"classes/CreateLocationDto.html":{},"classes/UpdateLocationDto.html":{},"index.html":{}}}],["section'})@isnotempty()@isstring()@matches(/^[a",{"_index":271,"title":{},"body":{"classes/CreateLocationDto.html":{}}}],["section'})@isoptional()@isstring()@matches(/^[a",{"_index":475,"title":{},"body":{"classes/UpdateLocationDto.html":{}}}],["segments",{"_index":355,"title":{},"body":{"injectables/LocationService.html":{}}}],["segments.length",{"_index":357,"title":{},"body":{"injectables/LocationService.html":{}}}],["select",{"_index":363,"title":{},"body":{"injectables/LocationService.html":{}}}],["server",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"index.html":{}}}],["setcontext",{"_index":402,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setcontext(mycontext",{"_index":412,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setup",{"_index":524,"title":{},"body":{"index.html":{}}}],["shared",{"_index":569,"title":{},"body":{"index.html":{}}}],["shared/httpinterceptor/http.interceptor",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/logger/logger.module",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/LocationModule.html":{}}}],["shared/logger/logger.service",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"controllers/LocationController.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Building.html":{},"controllers/BuildingController.html":{},"modules/BuildingModule.html":{},"injectables/BuildingService.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"modules/LocationModule.html":{},"injectables/LocationService.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{}}}],["specific",{"_index":571,"title":{},"body":{"index.html":{}}}],["square",{"_index":263,"title":{},"body":{"classes/CreateLocationDto.html":{},"classes/UpdateLocationDto.html":{}}}],["src/.../main.ts",{"_index":519,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":150,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":151,"title":{},"body":{"injectables/AppService.html":{}}}],["src/building/building.controller.ts",{"_index":165,"title":{},"body":{"controllers/BuildingController.html":{},"coverage.html":{}}}],["src/building/building.controller.ts:22",{"_index":176,"title":{},"body":{"controllers/BuildingController.html":{}}}],["src/building/building.controller.ts:27",{"_index":177,"title":{},"body":{"controllers/BuildingController.html":{}}}],["src/building/building.controller.ts:32",{"_index":180,"title":{},"body":{"controllers/BuildingController.html":{}}}],["src/building/building.controller.ts:38",{"_index":188,"title":{},"body":{"controllers/BuildingController.html":{}}}],["src/building/building.controller.ts:46",{"_index":184,"title":{},"body":{"controllers/BuildingController.html":{}}}],["src/building/building.module.ts",{"_index":214,"title":{},"body":{"modules/BuildingModule.html":{}}}],["src/building/building.service.ts",{"_index":218,"title":{},"body":{"injectables/BuildingService.html":{},"coverage.html":{}}}],["src/building/building.service.ts:15",{"_index":224,"title":{},"body":{"injectables/BuildingService.html":{}}}],["src/building/building.service.ts:20",{"_index":226,"title":{},"body":{"injectables/BuildingService.html":{}}}],["src/building/building.service.ts:24",{"_index":228,"title":{},"body":{"injectables/BuildingService.html":{}}}],["src/building/building.service.ts:28",{"_index":232,"title":{},"body":{"injectables/BuildingService.html":{}}}],["src/building/building.service.ts:36",{"_index":230,"title":{},"body":{"injectables/BuildingService.html":{}}}],["src/building/building.service.ts:9",{"_index":222,"title":{},"body":{"injectables/BuildingService.html":{}}}],["src/building/dto/create",{"_index":243,"title":{},"body":{"classes/CreateBuildingDto.html":{},"coverage.html":{}}}],["src/building/dto/update",{"_index":464,"title":{},"body":{"classes/UpdateBuildingDto.html":{},"coverage.html":{}}}],["src/building/entities/building.entity.ts",{"_index":155,"title":{},"body":{"entities/Building.html":{},"coverage.html":{}}}],["src/building/entities/building.entity.ts:4",{"_index":160,"title":{},"body":{"entities/Building.html":{}}}],["src/building/entities/building.entity.ts:5",{"_index":162,"title":{},"body":{"entities/Building.html":{}}}],["src/location/dto/create",{"_index":257,"title":{},"body":{"classes/CreateLocationDto.html":{},"coverage.html":{}}}],["src/location/dto/update",{"_index":468,"title":{},"body":{"classes/UpdateLocationDto.html":{},"coverage.html":{}}}],["src/location/entities/location.entity.ts",{"_index":282,"title":{},"body":{"entities/Location.html":{},"coverage.html":{}}}],["src/location/entities/location.entity.ts:11",{"_index":290,"title":{},"body":{"entities/Location.html":{}}}],["src/location/entities/location.entity.ts:12",{"_index":291,"title":{},"body":{"entities/Location.html":{}}}],["src/location/entities/location.entity.ts:6",{"_index":293,"title":{},"body":{"entities/Location.html":{}}}],["src/location/entities/location.entity.ts:7",{"_index":292,"title":{},"body":{"entities/Location.html":{}}}],["src/location/entities/location.entity.ts:8",{"_index":288,"title":{},"body":{"entities/Location.html":{}}}],["src/location/location.controller.ts",{"_index":297,"title":{},"body":{"controllers/LocationController.html":{},"coverage.html":{}}}],["src/location/location.controller.ts:25",{"_index":300,"title":{},"body":{"controllers/LocationController.html":{}}}],["src/location/location.controller.ts:30",{"_index":301,"title":{},"body":{"controllers/LocationController.html":{}}}],["src/location/location.controller.ts:35",{"_index":304,"title":{},"body":{"controllers/LocationController.html":{}}}],["src/location/location.controller.ts:40",{"_index":311,"title":{},"body":{"controllers/LocationController.html":{}}}],["src/location/location.controller.ts:48",{"_index":307,"title":{},"body":{"controllers/LocationController.html":{}}}],["src/location/location.module.ts",{"_index":330,"title":{},"body":{"modules/LocationModule.html":{}}}],["src/location/location.service.ts",{"_index":334,"title":{},"body":{"injectables/LocationService.html":{},"coverage.html":{}}}],["src/location/location.service.ts:13",{"_index":336,"title":{},"body":{"injectables/LocationService.html":{}}}],["src/location/location.service.ts:159",{"_index":341,"title":{},"body":{"injectables/LocationService.html":{}}}],["src/location/location.service.ts:19",{"_index":338,"title":{},"body":{"injectables/LocationService.html":{}}}],["src/location/location.service.ts:51",{"_index":339,"title":{},"body":{"injectables/LocationService.html":{}}}],["src/location/location.service.ts:55",{"_index":340,"title":{},"body":{"injectables/LocationService.html":{}}}],["src/location/location.service.ts:66",{"_index":342,"title":{},"body":{"injectables/LocationService.html":{}}}],["src/main.ts",{"_index":487,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/exceptionfilter/exception.filter.ts",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/shared/exceptionfilter/exception.filter.ts:11",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/shared/exceptionfilter/exception.filter.ts:14",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/shared/httpinterceptor/http.interceptor.ts",{"_index":429,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/shared/httpinterceptor/http.interceptor.ts:12",{"_index":431,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/shared/httpinterceptor/http.interceptor.ts:15",{"_index":436,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/shared/logger/logger.module.ts",{"_index":396,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/shared/logger/logger.service.ts",{"_index":398,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/shared/logger/logger.service.ts:12",{"_index":409,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/shared/logger/logger.service.ts:16",{"_index":418,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/shared/logger/logger.service.ts:20",{"_index":411,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/shared/logger/logger.service.ts:24",{"_index":407,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/shared/logger/logger.service.ts:28",{"_index":416,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/shared/logger/logger.service.ts:4",{"_index":405,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/shared/logger/logger.service.ts:9",{"_index":413,"title":{},"body":{"injectables/LoggerService.html":{}}}],["start",{"_index":350,"title":{},"body":{"injectables/LocationService.html":{}}}],["started",{"_index":521,"title":{"index.html":{}},"body":{}}],["starts",{"_index":347,"title":{},"body":{"injectables/LocationService.html":{}}}],["statements",{"_index":480,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["statuscode",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["string",{"_index":78,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Building.html":{},"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{},"injectables/LoggerService.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{}}}],["structure",{"_index":533,"title":{},"body":{"index.html":{}}}],["stuffs",{"_index":572,"title":{},"body":{"index.html":{}}}],["super",{"_index":421,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.debug(`${message",{"_index":427,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.error(`${message",{"_index":424,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.log(`${message",{"_index":426,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.verbose(`${message",{"_index":428,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.warn(`${message",{"_index":425,"title":{},"body":{"injectables/LoggerService.html":{}}}],["support",{"_index":584,"title":{},"body":{"modules.html":{}}}],["surbana",{"_index":423,"title":{},"body":{"injectables/LoggerService.html":{},"index.html":{}}}],["svg",{"_index":585,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":513,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["synchronize",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":491,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":490,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":441,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["tap((response",{"_index":454,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.appservice.gethello",{"_index":83,"title":{},"body":{"controllers/AppController.html":{}}}],["this.buildingrepository.create(createbuildingdto",{"_index":236,"title":{},"body":{"injectables/BuildingService.html":{}}}],["this.buildingrepository.delete(building_code",{"_index":242,"title":{},"body":{"injectables/BuildingService.html":{}}}],["this.buildingrepository.find",{"_index":238,"title":{},"body":{"injectables/BuildingService.html":{}}}],["this.buildingrepository.findone",{"_index":239,"title":{},"body":{"injectables/BuildingService.html":{}}}],["this.buildingrepository.save(building",{"_index":237,"title":{},"body":{"injectables/BuildingService.html":{}}}],["this.buildingrepository.update(building_code",{"_index":241,"title":{},"body":{"injectables/BuildingService.html":{}}}],["this.buildingservice.create(createbuildingdto",{"_index":203,"title":{},"body":{"controllers/BuildingController.html":{}}}],["this.buildingservice.findall",{"_index":204,"title":{},"body":{"controllers/BuildingController.html":{}}}],["this.buildingservice.findone(id",{"_index":206,"title":{},"body":{"controllers/BuildingController.html":{}}}],["this.buildingservice.remove(id",{"_index":211,"title":{},"body":{"controllers/BuildingController.html":{}}}],["this.buildingservice.update(id",{"_index":209,"title":{},"body":{"controllers/BuildingController.html":{}}}],["this.context",{"_index":422,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.locationrepository.delete(location_number",{"_index":392,"title":{},"body":{"injectables/LocationService.html":{}}}],["this.locationrepository.find",{"_index":359,"title":{},"body":{"injectables/LocationService.html":{}}}],["this.locationrepository.findone",{"_index":373,"title":{},"body":{"injectables/LocationService.html":{}}}],["this.locationrepository.query(query",{"_index":372,"title":{},"body":{"injectables/LocationService.html":{}}}],["this.locationsservice.create(createlocationdto",{"_index":319,"title":{},"body":{"controllers/LocationController.html":{}}}],["this.locationsservice.findall",{"_index":320,"title":{},"body":{"controllers/LocationController.html":{}}}],["this.locationsservice.findone(location_number",{"_index":322,"title":{},"body":{"controllers/LocationController.html":{}}}],["this.locationsservice.remove(location_number",{"_index":326,"title":{},"body":{"controllers/LocationController.html":{}}}],["this.locationsservice.update(location_number",{"_index":324,"title":{},"body":{"controllers/LocationController.html":{}}}],["this.mylogger.error",{"_index":461,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.mylogger.error(json.stringify(errorresponse",{"_index":67,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.mylogger.log",{"_index":456,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.mylogger.log(`incoming",{"_index":449,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.mylogger.log(`request",{"_index":451,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.mylogger.setcontext('locationservice",{"_index":318,"title":{},"body":{"controllers/LocationController.html":{}}}],["this.mylogger.setcontext(context.getclass().name",{"_index":444,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["throw",{"_index":349,"title":{},"body":{"injectables/LocationService.html":{},"injectables/LoggingInterceptor.html":{}}}],["timestamp",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["transformer",{"_index":502,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["type",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"entities/Building.html":{},"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{},"coverage.html":{}}}],["typeorm",{"_index":163,"title":{},"body":{"entities/Building.html":{},"injectables/BuildingService.html":{},"entities/Location.html":{},"injectables/LocationService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/BuildingModule.html":{},"modules/LocationModule.html":{}}}],["typeormmodule.forfeature([building",{"_index":217,"title":{},"body":{"modules/BuildingModule.html":{}}}],["typeormmodule.forfeature([location",{"_index":333,"title":{},"body":{"modules/LocationModule.html":{}}}],["typeormmodule.forrootasync",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":498,"title":{},"body":{"dependencies.html":{}}}],["ui",{"_index":514,"title":{},"body":{"dependencies.html":{}}}],["union",{"_index":364,"title":{},"body":{"injectables/LocationService.html":{}}}],["unknown",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["unlicensed",{"_index":593,"title":{},"body":{"properties.html":{}}}],["update",{"_index":171,"title":{},"body":{"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"controllers/LocationController.html":{},"injectables/LocationService.html":{}}}],["update(building_code",{"_index":231,"title":{},"body":{"injectables/BuildingService.html":{}}}],["update(id",{"_index":185,"title":{},"body":{"controllers/BuildingController.html":{}}}],["update(location_number",{"_index":308,"title":{},"body":{"controllers/LocationController.html":{},"injectables/LocationService.html":{}}}],["updatebuildingdto",{"_index":186,"title":{"classes/UpdateBuildingDto.html":{}},"body":{"controllers/BuildingController.html":{},"injectables/BuildingService.html":{},"classes/UpdateBuildingDto.html":{},"coverage.html":{}}}],["updated",{"_index":387,"title":{},"body":{"injectables/LocationService.html":{}}}],["updatelocationdto",{"_index":309,"title":{"classes/UpdateLocationDto.html":{}},"body":{"controllers/LocationController.html":{},"injectables/LocationService.html":{},"classes/UpdateLocationDto.html":{},"coverage.html":{}}}],["updatelocationdto.building_code",{"_index":379,"title":{},"body":{"injectables/LocationService.html":{}}}],["updatelocationdto.location_number",{"_index":376,"title":{},"body":{"injectables/LocationService.html":{}}}],["url",{"_index":446,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["usefactory",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["usepipes",{"_index":194,"title":{},"body":{"controllers/BuildingController.html":{}}}],["usepipes(new",{"_index":201,"title":{},"body":{"controllers/BuildingController.html":{}}}],["username",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["using",{"_index":566,"title":{},"body":{"index.html":{}}}],["validate",{"_index":346,"title":{},"body":{"injectables/LocationService.html":{}}}],["validation",{"_index":560,"title":{},"body":{"index.html":{}}}],["validationpipe",{"_index":175,"title":{},"body":{"controllers/BuildingController.html":{}}}],["validator",{"_index":254,"title":{},"body":{"classes/CreateBuildingDto.html":{},"classes/CreateLocationDto.html":{},"classes/UpdateBuildingDto.html":{},"classes/UpdateLocationDto.html":{},"dependencies.html":{}}}],["verbose",{"_index":403,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verbose(message",{"_index":415,"title":{},"body":{"injectables/LoggerService.html":{}}}],["version",{"_index":590,"title":{},"body":{"properties.html":{}}}],["void",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggerService.html":{}}}],["warn",{"_index":404,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warn(message",{"_index":417,"title":{},"body":{"injectables/LoggerService.html":{}}}],["web",{"_index":539,"title":{},"body":{"index.html":{}}}],["well",{"_index":549,"title":{},"body":{"index.html":{}}}],["world",{"_index":153,"title":{},"body":{"injectables/AppService.html":{}}}],["z0",{"_index":273,"title":{},"body":{"classes/CreateLocationDto.html":{},"classes/UpdateLocationDto.html":{}}}],["za",{"_index":272,"title":{},"body":{"classes/CreateLocationDto.html":{},"classes/UpdateLocationDto.html":{}}}],["zoom",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/BuildingModule.html":{},"modules/LocationModule.html":{},"modules/LoggerModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/exceptionFilter/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(myLogger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/exceptionFilter/exception.filter.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        myLogger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/exceptionFilter/exception.filter.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { LoggerService } from '../logger/logger.service';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  constructor(private myLogger: LoggerService) {}\n\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n    const status =\n      exception instanceof HttpException ? exception.getStatus() : 500;\n\n    const errorResponse = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      message:\n        exception instanceof HttpException\n          ? exception.message\n          : 'Internal server error',\n    };\n\n    // Log non-HTTP exceptions only\n    if (!(exception instanceof HttpException)) {\n      this.myLogger.error(JSON.stringify(errorResponse));\n    }\n\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nBuildingModule\n\nBuildingModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBuildingModule->AppModule\n\n\n\n\n\nLocationModule\n\nLocationModule\n\nAppModule -->\n\nLocationModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BuildingModule\n                        \n                        \n                            LocationModule\n                        \n                        \n                            LoggerModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { BuildingModule } from './building/building.module';\nimport { LocationModule } from './location/location.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Building } from './building/entities/building.entity';\nimport { Location } from './location/entities/location.entity';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { LoggerModule } from './shared/logger/logger.module';\nimport { APP_FILTER, APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggingInterceptor } from './shared/httpInterceptor/http.interceptor';\nimport { LoggerService } from './shared/logger/logger.service';\n\n@Module({\n  imports: [\n    LoggerModule,\n    ConfigModule.forRoot({ isGlobal: true }),\n    BuildingModule,\n    LocationModule,\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_DATABASE'),\n        entities: [Building, Location],\n        synchronize: false,\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_INTERCEPTOR,\n      useFactory: (loggingService: LoggerService) =>\n        new LoggingInterceptor(loggingService),\n      inject: [LoggerService],\n    },\n    {\n      provide: APP_FILTER,\n      useFactory: (loggingService: LoggerService) =>\n        new LoggingInterceptor(loggingService),\n      inject: [LoggerService],\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Building.html":{"url":"entities/Building.html","title":"entity - Building","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Building\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/building/entities/building.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                building_code\n                            \n                            \n                                    \n                                building_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        building_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/building/entities/building.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        building_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/building/entities/building.entity.ts:5\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryColumn } from 'typeorm';\n@Entity()\nexport class Building {\n  @PrimaryColumn() building_code: string;\n  @Column() building_name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BuildingController.html":{"url":"controllers/BuildingController.html","title":"controller - BuildingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BuildingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/building/building.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                building\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createBuildingDto: CreateBuildingDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(new ValidationPipe())\n                \n            \n\n                    \n                        \n                            Defined in src/building/building.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createBuildingDto\n                                            \n                                                            CreateBuildingDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/building/building.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/building/building.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/building/building.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateBuildingDto: UpdateBuildingDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UsePipes(new ValidationPipe())\n                \n            \n\n                    \n                        \n                            Defined in src/building/building.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateBuildingDto\n                                            \n                                                            UpdateBuildingDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { BuildingService } from './building.service';\nimport { CreateBuildingDto } from './dto/create-building.dto';\nimport { UpdateBuildingDto } from './dto/update-building.dto';\n\n@Controller('building')\nexport class BuildingController {\n  constructor(private readonly buildingService: BuildingService) {}\n\n  @Post()\n  @UsePipes(new ValidationPipe())\n  create(@Body() createBuildingDto: CreateBuildingDto) {\n    return this.buildingService.create(createBuildingDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.buildingService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.buildingService.findOne(id);\n  }\n\n  @Patch(':id')\n  @UsePipes(new ValidationPipe())\n  update(\n    @Param('id') id: string,\n    @Body() updateBuildingDto: UpdateBuildingDto,\n  ) {\n    return this.buildingService.update(id, updateBuildingDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.buildingService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BuildingModule.html":{"url":"modules/BuildingModule.html","title":"module - BuildingModule","body":"\n                   \n\n\n\n\n    Modules\n    BuildingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BuildingModule\n\n\n\ncluster_BuildingModule_providers\n\n\n\n\nBuildingService\n\nBuildingService\n\n\n\nBuildingModule\n\nBuildingModule\n\nBuildingModule -->\n\nBuildingService->BuildingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/building/building.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BuildingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BuildingController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BuildingService } from './building.service';\nimport { BuildingController } from './building.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Building } from './entities/building.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Building])],\n  controllers: [BuildingController],\n  providers: [BuildingService],\n})\nexport class BuildingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BuildingService.html":{"url":"injectables/BuildingService.html","title":"injectable - BuildingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BuildingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/building/building.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(buildingRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/building/building.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        buildingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createBuildingDto: CreateBuildingDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/building/building.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createBuildingDto\n                                            \n                                                            CreateBuildingDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/building/building.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(building_code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/building/building.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                building_code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(building_code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/building/building.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                building_code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(building_code: string, updateBuildingDto: UpdateBuildingDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/building/building.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                building_code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateBuildingDto\n                                            \n                                                            UpdateBuildingDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Building } from './entities/building.entity';\nimport { CreateBuildingDto } from './dto/create-building.dto';\nimport { UpdateBuildingDto } from './dto/update-building.dto';\n\n@Injectable()\nexport class BuildingService {\n  constructor(\n    @InjectRepository(Building)\n    private readonly buildingRepository: Repository,\n  ) {}\n\n  async create(createBuildingDto: CreateBuildingDto): Promise {\n    const building = this.buildingRepository.create(createBuildingDto);\n    return this.buildingRepository.save(building);\n  }\n\n  async findAll(): Promise {\n    return this.buildingRepository.find();\n  }\n\n  async findOne(building_code: string): Promise {\n    return this.buildingRepository.findOne({ where: { building_code } });\n  }\n\n  async update(\n    building_code: string,\n    updateBuildingDto: UpdateBuildingDto,\n  ): Promise {\n    await this.buildingRepository.update(building_code, updateBuildingDto);\n    return this.buildingRepository.findOne({ where: { building_code } });\n  }\n\n  async remove(building_code: string): Promise {\n    await this.buildingRepository.delete(building_code);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBuildingDto.html":{"url":"classes/CreateBuildingDto.html","title":"class - CreateBuildingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBuildingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/building/dto/create-building.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                building_code\n                            \n                            \n                                    \n                                    \n                                    \n                                building_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        building_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The code of the building'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/building/dto/create-building.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        building_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the building'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/building/dto/create-building.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nexport class CreateBuildingDto {\n  @ApiProperty({ description: 'The code of the building' })\n  @IsNotEmpty()\n  @IsString()\n  building_code: string;\n\n  @ApiProperty({ description: 'The name of the building' })\n  @IsNotEmpty()\n  @IsString()\n  building_name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLocationDto.html":{"url":"classes/CreateLocationDto.html","title":"class - CreateLocationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLocationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/location/dto/create-location.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                area\n                            \n                            \n                                    \n                                    \n                                    \n                                building_code\n                            \n                            \n                                    \n                                    \n                                    \n                                location_name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                location_number\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        area\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The area of the location in square meters'})@IsNotEmpty()@IsDecimal()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/location/dto/create-location.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        building_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The code of the building'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/location/dto/create-location.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        location_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the location'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/location/dto/create-location.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        location_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The location number in the format BuildingCode-Section'})@IsNotEmpty()@IsString()@Matches(/^[A-Za-z0-9]+(-[A-Za-z0-9]+)*$/, {message: 'location_number must follow the format BuildingCode-Section'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/location/dto/create-location.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, Matches, IsDecimal } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateLocationDto {\n  @ApiProperty({\n    description: 'The location number in the format BuildingCode-Section',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @Matches(/^[A-Za-z0-9]+(-[A-Za-z0-9]+)*$/, {\n    message: 'location_number must follow the format BuildingCode-Section',\n  })\n  location_number: string;\n\n  @ApiProperty({ description: 'The name of the location' })\n  @IsNotEmpty()\n  @IsString()\n  location_name: string;\n\n  @ApiProperty({ description: 'The area of the location in square meters' })\n  @IsNotEmpty()\n  @IsDecimal()\n  area: number;\n\n  @ApiProperty({ description: 'The code of the building' })\n  @IsNotEmpty()\n  @IsString()\n  building_code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Location.html":{"url":"entities/Location.html","title":"entity - Location","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Location\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/location/entities/location.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                area\n                            \n                            \n                                    \n                                    \n                                building\n                            \n                            \n                                    \n                                building_code\n                            \n                            \n                                    \n                                location_name\n                            \n                            \n                                    \n                                location_number\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        area\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/location/entities/location.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        building\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Building\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'building_code'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/location/entities/location.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        building_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/location/entities/location.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        location_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/location/entities/location.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        location_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/location/entities/location.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Building } from '../../building/entities/building.entity';\nimport { Entity, Column, ManyToOne, JoinColumn, PrimaryColumn } from 'typeorm';\n\n@Entity()\nexport class Location {\n  @PrimaryColumn() location_number: string;\n  @Column() location_name: string;\n  @Column('decimal', { precision: 10, scale: 2 }) area: number;\n  @ManyToOne(() => Building)\n  @JoinColumn({ name: 'building_code' })\n  building: Building;\n  @Column() building_code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LocationController.html":{"url":"controllers/LocationController.html","title":"controller - LocationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LocationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/location/location.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                locations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createLocationDto: CreateLocationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/location/location.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createLocationDto\n                                            \n                                                            CreateLocationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/location/location.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(location_number: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':location_number')\n                \n            \n\n                    \n                        \n                            Defined in src/location/location.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                location_number\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(location_number: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':location_number')\n                \n            \n\n                    \n                        \n                            Defined in src/location/location.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                location_number\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(location_number: string, updateLocationDto: UpdateLocationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':location_number')\n                \n            \n\n                    \n                        \n                            Defined in src/location/location.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                location_number\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateLocationDto\n                                            \n                                                            UpdateLocationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Put,\n  Delete,\n} from '@nestjs/common';\nimport { LocationService } from './location.service';\nimport { CreateLocationDto } from './dto/create-location.dto';\nimport { UpdateLocationDto } from './dto/update-location.dto';\nimport { LoggerService } from '../shared/logger/logger.service';\n\n@Controller('locations')\nexport class LocationController {\n  constructor(\n    private readonly locationsService: LocationService,\n    private myLogger: LoggerService,\n  ) {\n    this.myLogger.setContext('LocationService');\n  }\n\n  @Post()\n  create(@Body() createLocationDto: CreateLocationDto) {\n    return this.locationsService.create(createLocationDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.locationsService.findAll();\n  }\n\n  @Get(':location_number')\n  findOne(@Param('location_number') location_number: string) {\n    return this.locationsService.findOne(location_number);\n  }\n\n  @Put(':location_number')\n  update(\n    @Param('location_number') location_number: string,\n    @Body() updateLocationDto: UpdateLocationDto,\n  ) {\n    return this.locationsService.update(location_number, updateLocationDto);\n  }\n\n  @Delete(':location_number')\n  remove(@Param('location_number') location_number: string) {\n    return this.locationsService.remove(location_number);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LocationModule.html":{"url":"modules/LocationModule.html","title":"module - LocationModule","body":"\n                   \n\n\n\n\n    Modules\n    LocationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LocationModule\n\n\n\ncluster_LocationModule_providers\n\n\n\ncluster_LocationModule_imports\n\n\n\n\nLoggerModule\n\nLoggerModule\n\n\n\nLocationModule\n\nLocationModule\n\nLocationModule -->\n\nLoggerModule->LocationModule\n\n\n\n\n\nLocationService\n\nLocationService\n\nLocationModule -->\n\nLocationService->LocationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/location/location.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LocationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LocationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            LoggerModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { LocationController } from './location.controller';\nimport { LocationService } from './location.service';\nimport { Location } from './entities/location.entity';\nimport { LoggerModule } from '../shared/logger/logger.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Location]), LoggerModule],\n  controllers: [LocationController],\n  providers: [LocationService],\n})\nexport class LocationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocationService.html":{"url":"injectables/LocationService.html","title":"injectable - LocationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/location/location.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(locationRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/location/location.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        locationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createLocationDto: CreateLocationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/location/location.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createLocationDto\n                                            \n                                                            CreateLocationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/location/location.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(location_number: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/location/location.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                location_number\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(location_number: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/location/location.service.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                location_number\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(location_number: string, updateLocationDto: UpdateLocationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/location/location.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                location_number\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateLocationDto\n                                            \n                                                            UpdateLocationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Location } from './entities/location.entity';\nimport { CreateLocationDto } from './dto/create-location.dto';\nimport { UpdateLocationDto } from './dto/update-location.dto';\n\n@Injectable()\nexport class LocationService {\n  constructor(\n    @InjectRepository(Location)\n    private readonly locationRepository: Repository,\n  ) {}\n\n  async create(createLocationDto: CreateLocationDto): Promise {\n    const { location_number, building_code } = createLocationDto;\n\n    // Validate that the location_number starts with the building_code\n    if (!location_number.startsWith(building_code)) {\n      throw new BadRequestException(\n        `The location number must start with the same building code.`,\n      );\n    }\n\n    // Validate parent location existence for child locations\n    const segments = location_number.split('-');\n    if (segments.length > 1) {\n      for (let i = 1; i  {\n    return this.locationRepository.find();\n  }\n\n  async findOne(location_number: string): Promise {\n    const query = `WITH RECURSIVE LocationTree AS (\n    SELECT * FROM Location WHERE location_number = $1\n    UNION ALL\n    SELECT l.* FROM Location l\n    INNER JOIN LocationTree lt ON l.location_number LIKE lt.location_number || '-%'\n    )\n    SELECT distinct * FROM LocationTree;`;\n    return this.locationRepository.query(query, [location_number]);\n  }\n\n  async update(\n    location_number: string,\n    updateLocationDto: UpdateLocationDto,\n  ): Promise {\n    const location = await this.locationRepository.findOne({\n      where: { location_number },\n    });\n\n    if (!location) {\n      throw new NotFoundException(\n        `Location with number ${location_number} not found`,\n      );\n    }\n\n    const newLocationNumber =\n      updateLocationDto.location_number || location.location_number;\n    const newBuildingCode =\n      updateLocationDto.building_code || newLocationNumber.split('-')[0];\n\n    // Validate that the provided building_code matches the location_number prefix if both are provided\n    if (\n      updateLocationDto.building_code &&\n      updateLocationDto.location_number &&\n      !newLocationNumber.startsWith(updateLocationDto.building_code)\n    ) {\n      throw new BadRequestException(\n        `The building code and location number prefix do not match.`,\n      );\n    }\n\n    // Determine the updated location_number with the new building_code prefix if only building_code is provided\n    const finalNewLocationNumber = updateLocationDto.location_number\n      ? newLocationNumber\n      : `${newBuildingCode}${location_number.slice(location_number.indexOf('-'))}`;\n\n    // Validate hierarchy existence in the new building\n    const segments = finalNewLocationNumber.split('-');\n    for (let i = 1; i  {\n    await this.locationRepository.delete(location_number);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nLoggerService \n\nLoggerService \n\n\n\nLoggerModule\n\nLoggerModule\n\nLoggerService  -->\n\nLoggerModule->LoggerService \n\n\n\n\n\nLoggerService\n\nLoggerService\n\nLoggerModule -->\n\nLoggerService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LoggerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LoggerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LoggerService } from './logger.service';\n\n@Module({\n  providers: [LoggerService],\n  exports: [LoggerService],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/logger/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Logger\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                setContext\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/shared/logger/logger.service.ts:4\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/logger/logger.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/logger/logger.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/logger/logger.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setContext\n                        \n                    \n                \n            \n            \n                \nsetContext(mycontext: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/logger/logger.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                mycontext\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/logger/logger.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/logger/logger.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class LoggerService extends Logger {\n  constructor() {\n    super();\n    this.context = 'surbana';\n  }\n  setContext(mycontext: string) {\n    this.context = mycontext;\n  }\n  error(message: any) {\n    super.error(`${message}`);\n  }\n\n  warn(message: any) {\n    super.warn(`${message}`);\n  }\n\n  log(message: any) {\n    super.log(`${message}`);\n  }\n\n  debug(message: any) {\n    super.debug(`${message}`);\n  }\n\n  verbose(message: any) {\n    super.verbose(`${message}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/httpInterceptor/http.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(myLogger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/httpInterceptor/http.interceptor.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        myLogger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/httpInterceptor/http.interceptor.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { LoggerService } from '../logger/logger.service';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  constructor(private readonly myLogger: LoggerService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    this.myLogger.setContext(context.getClass().name);\n    const request = context.switchToHttp().getRequest();\n    const { method, url, body } = request;\n\n    const now = Date.now();\n    this.myLogger.log(`Incoming Request - ${method} ${url}`);\n    if (Object.keys(body).length > 0) {\n      this.myLogger.log(`Request Body: ${JSON.stringify(body)}`);\n    }\n    return next.handle().pipe(\n      tap((response) => {\n        const responseTime = Date.now() - now;\n        this.myLogger.log(\n          `Response Method - ${method} ${url} - ${responseTime}ms` +\n            '\\n' +\n            `Response Body: ${JSON.stringify(response)}`,\n        );\n      }),\n      catchError((error) => {\n        this.myLogger.error(\n          `Request failed - ${method} ${url} - ${error.message}`,\n        );\n        throw error;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateBuildingDto.html":{"url":"classes/UpdateBuildingDto.html","title":"class - UpdateBuildingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBuildingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/building/dto/update-building.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                building_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        building_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the building'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/building/dto/update-building.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class UpdateBuildingDto {\n  @ApiProperty({ description: 'The name of the building' })\n  @IsOptional()\n  @IsString()\n  building_name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateLocationDto.html":{"url":"classes/UpdateLocationDto.html","title":"class - UpdateLocationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateLocationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/location/dto/update-location.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                area\n                            \n                            \n                                    \n                                    \n                                building_code\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                location_name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                location_number\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        area\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The area of the location in square meters'})@IsOptional()@IsDecimal()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/location/dto/update-location.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        building_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The code of the building'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/location/dto/update-location.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        location_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The name of the location'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/location/dto/update-location.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        location_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The location number in the format BuildingCode-Section'})@IsOptional()@IsString()@Matches(/^[A-Za-z0-9]+(-[A-Za-z0-9]+)*$/, {message: 'location_number must follow the format BuildingCode-Section'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/location/dto/update-location.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString, Matches, IsDecimal } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class UpdateLocationDto {\n  @ApiPropertyOptional({\n    description: 'The location number in the format BuildingCode-Section',\n  })\n  @IsOptional()\n  @IsString()\n  @Matches(/^[A-Za-z0-9]+(-[A-Za-z0-9]+)*$/, {\n    message: 'location_number must follow the format BuildingCode-Section',\n  })\n  location_number?: string;\n\n  @ApiPropertyOptional({ description: 'The name of the location' })\n  @IsOptional()\n  @IsString()\n  location_name?: string;\n\n  @ApiPropertyOptional({\n    description: 'The area of the location in square meters',\n  })\n  @IsOptional()\n  @IsDecimal()\n  area?: number;\n\n  @ApiPropertyOptional({ description: 'The code of the building' })\n  @IsString()\n  building_code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/building/building.controller.ts\n            \n            controller\n            BuildingController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/building/building.service.ts\n            \n            injectable\n            BuildingService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/building/dto/create-building.dto.ts\n            \n            class\n            CreateBuildingDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/building/dto/update-building.dto.ts\n            \n            class\n            UpdateBuildingDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/building/entities/building.entity.ts\n            \n            entity\n            Building\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/location/dto/create-location.dto.ts\n            \n            class\n            CreateLocationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/location/dto/update-location.dto.ts\n            \n            class\n            UpdateLocationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/location/entities/location.entity.ts\n            \n            entity\n            Location\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/location/location.controller.ts\n            \n            controller\n            LocationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/location/location.service.ts\n            \n            injectable\n            LocationService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/exceptionFilter/exception.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/httpInterceptor/http.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            save : ^2.9.0\n        \n            swagger-ui-express : ^5.0.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n1. Description\nProject for the assignment of Surbana\n2. Project setup\nExample :$ npm install3. Compile and run the project\nExample :# live reload dev\n$ npm run live\n\n# project structure documentation - generated by compodoc (will run at port 8080)\n$ npm run docs\n\n# for both live reload server and documenation web\n$ npm run both4. Notes\n\nI have included the dump file of postgres deveploment database for this project in the DB folder.\nPlease import it first (as well as run your db server).\nThe .env file includes all the DB connection related configurations. Change them according to your\nown enviroment setup.\nFor the assignment's checklist:\nValidation request: all parameters for the apis made with basic validation.\nHandle exception: the exception is handled using a centralized filter. ('shared' folder).\nThere is also a http interceptor for http specific stuffs.\nImplement Logging: the centrailzed logger is also included in 'shared' folder.\nClean code and documentation for your project: The apis has been documentated using Swagger\n(default will run at port 3000 - localhost:3000/swagger). For project structure, please check\nsection 3.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BuildingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LocationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_BuildingModule\n\n\n\ncluster_BuildingModule_providers\n\n\n\ncluster_LocationModule\n\n\n\ncluster_LocationModule_providers\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nBuildingModule\n\nBuildingModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBuildingModule->AppModule\n\n\n\n\n\nLocationModule\n\nLocationModule\n\nAppModule -->\n\nLocationModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nLocationModule -->\n\nLoggerModule->LocationModule\n\n\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nLoggerService \n\nLoggerService \n\nLoggerService  -->\n\nLoggerModule->LoggerService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nBuildingService\n\nBuildingService\n\nBuildingModule -->\n\nBuildingService->BuildingModule\n\n\n\n\n\nLocationService\n\nLocationService\n\nLocationModule -->\n\nLocationService->LocationModule\n\n\n\n\n\nLoggerService\n\nLoggerService\n\nLoggerModule -->\n\nLoggerService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
